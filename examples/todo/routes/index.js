'use strict';

const _ = require('lodash');

/**
 * @Route("GET /", list="all", template="index")
 * @Route("GET /list/<list:string>", template="index")
 */
class IndexRoute {
  /**
   * Generate data for index page.
   *
   * @param {string} list
   *   List type to show. Variable was declared in annotations.
   * @param {Session} session
   *   Session object generated by bluegate-session object.
   * @param {string} csrfToken
   *   CSRF token, generated by bluegate-csrf module.
   */
  process(list, session, csrfToken) {
    // Get items from session and add link paths for ready link.
    let items = session.get('items', []).map(item => {
      const changeTo = String(!item.completed);
      const destination = encodeURIComponent(`/list/${list}`);
      item.readyLink = `/mark-ready/${item.id}/${csrfToken}/${changeTo}?destination=${destination}`;
      return item;
    });

    // Calculate counts.
    const count = items.length;
    const completedCount = _.filter(items, {completed: true}).length;
    const todoCount = count - completedCount;

    // Filter items.
    if (list !== 'all') {
      items = _.filter(items, {completed: list === 'completed'});
    }

    // Take error messages from session, generated by the form handling.
    const messages = session.get('messages', []);
    session.del('messages');

    // Return all information necessary to render this page.
    return {
      items,
      messages,
      tabs: [{
        label: 'All',
        count,
        active: list === 'all',
        link: '/'
      }, {
        label: 'Todo',
        count: todoCount,
        active: list === 'todo',
        link: '/list/todo'
      }, {
        label: 'Completed',
        count: completedCount,
        active: list === 'completed',
        link: '/list/completed'
      }],
      clearCompletedLink: completedCount ? `/clear-completed/${csrfToken}` : null,
      csrfToken
    };
  }
}

module.exports = IndexRoute;
